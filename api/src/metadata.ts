/* eslint-disable */
export default async () => {
    const t = {
        ["./teams/entities/team.entity"]: await import("./teams/entities/team.entity"),
        ["./matches/dto/team-score.dto"]: await import("./matches/dto/team-score.dto"),
        ["./matches/entities/match.entity"]: await import("./matches/entities/match.entity")
    };
    return { "@nestjs/swagger": { "models": [[import("./teams/entities/team.entity"), { "Team": { id: { required: true, type: () => String, description: "The unique id." }, name: { required: true, type: () => String, description: "The name of the team.", minLength: 3, maxLength: 60 } } }], [import("./matches/entities/match.entity"), { "Match": { id: { required: true, type: () => String, description: "The unique id." }, score: { required: false, type: () => String, description: "The score of the match.", example: "1-1", pattern: "/^[0-9]+-[0-9]+$/" }, dateTime: { required: true, type: () => Date, description: "Date and time when the match is scheduled or took place.", example: "2023-11-10T15:00:00.000Z" }, firstTeam: { required: true, type: () => t["./teams/entities/team.entity"].Team, description: "The first team." }, secondTeam: { required: true, type: () => t["./teams/entities/team.entity"].Team, description: "The second team." } } }], [import("./users/entities/user.entity"), { "User": { id: { required: true, type: () => String, description: "The unique id." }, name: { required: true, type: () => String, description: "The name of the user.", minLength: 3, maxLength: 100 }, password: { required: true, type: () => String, description: "Hashed password for the user." } } }], [import("./auth/dto/sign-in.dto"), { "SignInDto": { name: { required: true, type: () => String, description: "The name." }, password: { required: true, type: () => String, description: "The password." } } }], [import("./matches/dto/team-score.dto"), { "TeamScoreDto": { id: { required: true, type: () => String, description: "The id of the team." }, score: { required: true, type: () => Number, description: "The score achieved by the team." } } }], [import("./matches/dto/create-match.dto"), { "CreateMatchDto": { firstTeam: { required: true, type: () => t["./matches/dto/team-score.dto"].TeamScoreDto, description: "Information for the first team, including id and score." }, secondTeam: { required: true, type: () => t["./matches/dto/team-score.dto"].TeamScoreDto, description: "Information for the second team, including id and score." }, dateTime: { required: true, type: () => Date, description: "Date and time when the match is scheduled or took place." } } }], [import("./matches/dto/update-match.dto"), { "UpdateMatchDto": { id: { required: true, type: () => String, description: "The unique id." } } }], [import("./teams/dto/create-team.dto"), { "CreateTeamDto": { name: { required: true, type: () => String, description: "The name of the team.", minLength: 3, maxLength: 60 } } }]], "controllers": [[import("./auth/auth.controller"), { "AuthController": { "signIn": { summary: "Log the user in." }, "refresh": { summary: "Refresh the authentication token." } } }], [import("./matches/matches.controller"), { "MatchesController": { "create": { summary: "Creates a past or future match.", type: t["./matches/entities/match.entity"].Match }, "findAll": { summary: "Finds all the matches.", type: [t["./matches/entities/match.entity"].Match] }, "update": { type: t["./matches/entities/match.entity"].Match } } }], [import("./teams/teams.controller"), { "TeamsController": { "create": { summary: "Creates a new team.", type: t["./teams/entities/team.entity"].Team }, "findAll": { summary: "Gets all teams.", type: [t["./teams/entities/team.entity"].Team] } } }]] } };
};